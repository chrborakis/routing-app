{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kapetan Mixalis\\\\ReactApps\\\\route-app\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Events() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 16\n    }, this);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n}\n_s(Events, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = Events;\nexport default Events;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/eventfs');\n  if (!response.ok) {\n    return {\n      isError: true,\n      message: \"Could not fetch events!\"\n    };\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","Events","_s","data","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loader","response","fetch","ok","$RefreshReg$"],"sources":["C:/Users/Kapetan Mixalis/ReactApps/route-app/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction Events() {\r\n    const data = useLoaderData();\r\n    if(data.isError){\r\n        return <p>{data.message}</p>\r\n    }\r\n    const events = data.events;\r\n\r\n    return (\r\n        <EventsList events={events} />\r\n    );\r\n}\r\n\r\nexport default Events;\r\n\r\nexport async function loader(){\r\n    const response = await fetch('http://localhost:8080/eventfs');\r\n\r\n    if (!response.ok) {\r\n        return {isError: true, message:\"Could not fetch events!\"};\r\n    } else {\r\n        return response;\r\n    }\r\n}"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAMC,IAAI,GAAGN,aAAa,EAAE;EAC5B,IAAGM,IAAI,CAACC,OAAO,EAAC;IACZ,oBAAOJ,OAAA;MAAAK,QAAA,EAAIF,IAAI,CAACG;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK;EAChC;EACA,MAAMC,MAAM,GAAGR,IAAI,CAACQ,MAAM;EAE1B,oBACIX,OAAA,CAACF,UAAU;IAACa,MAAM,EAAEA;EAAO;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAEtC;AAACR,EAAA,CAVQD,MAAM;EAAA,QACEJ,aAAa;AAAA;AAAAe,EAAA,GADrBX,MAAM;AAYf,eAAeA,MAAM;AAErB,OAAO,eAAeY,MAAMA,CAAA,EAAE;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;EAE7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,OAAO;MAACZ,OAAO,EAAE,IAAI;MAAEE,OAAO,EAAC;IAAyB,CAAC;EAC7D,CAAC,MAAM;IACH,OAAOQ,QAAQ;EACnB;AACJ;AAAC,IAAAF,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}