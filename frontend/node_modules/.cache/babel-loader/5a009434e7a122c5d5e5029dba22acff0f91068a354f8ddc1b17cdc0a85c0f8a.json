{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kapetan Mixalis\\\\ReactApps\\\\route-app\\\\frontend\\\\src\\\\pages\\\\EventsPage.js\",\n  _s = $RefreshSig$();\nimport { Suspense } from 'react';\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Suspense","useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","events","children","resolve","loadedEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/Users/Kapetan Mixalis/ReactApps/route-app/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { Suspense } from 'react';\r\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n    const {events} = useLoaderData();\r\n\r\n    return (<>\r\n        <Await resolve={events}>\r\n            { (loadedEvents) => <EventsList events={loadedEvents} />}\r\n        </Await>\r\n        <Suspense></Suspense>\r\n    </>);\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents(){\r\n    const response = await fetch('http://localhost:8080/events');\r\n\r\n    if (!response.ok) {\r\n        throw json(\r\n            {message:\"Could not fetch events.\"}, \r\n            {status: 500}\r\n        );\r\n    } else {\r\n        return response;\r\n    }\r\n}\r\n\r\nexport function loader(){\r\n    return defer({\r\n        events: loadEvents()\r\n    });\r\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM;IAACC;EAAM,CAAC,GAAGX,aAAa,EAAE;EAEhC,oBAAQM,OAAA,CAAAE,SAAA;IAAAI,QAAA,gBACJN,OAAA,CAACH,KAAK;MAACU,OAAO,EAAEF,MAAO;MAAAC,QAAA,EAChBE,YAAY,iBAAKR,OAAA,CAACF,UAAU;QAACO,MAAM,EAAEG;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACpD,eACRZ,OAAA,CAACP,QAAQ;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAY;EAAA,gBACtB;AACP;AAACR,EAAA,CATQD,UAAU;EAAA,QACET,aAAa;AAAA;AAAAmB,EAAA,GADzBV,UAAU;AAWnB,eAAeA,UAAU;AAEzB,eAAeW,UAAUA,CAAA,EAAE;EACvB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,MAAMtB,IAAI,CACN;MAACuB,OAAO,EAAC;IAAyB,CAAC,EACnC;MAACC,MAAM,EAAE;IAAG,CAAC,CAChB;EACL,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAE;EACpB,OAAOxB,KAAK,CAAC;IACTS,MAAM,EAAES,UAAU;EACtB,CAAC,CAAC;AACN;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}